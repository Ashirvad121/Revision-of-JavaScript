// Function to fetch data from the API using async/await
async function fetchPosts() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts');
    if (!response.ok) {
      throw new Error('Network response was not ok.');
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error:', error);
    return []; // Return an empty array in case of error
  }
}
In this example, we will use the fetch() function to make a GET request to the "jsonplaceholder" API, which will return a list of posts. We use 
async/await to handle the asynchronous nature of the API call and response handling.
1.async function fetchPosts() {: We define the fetchPosts() function as an asynchronous function using the async keyword.
2.try { ... } catch (error) { ... }: Inside the function, we use a try-catch block to handle any errors that might occur during the API call or 
data processing.
3.const response = await fetch('https://jsonplaceholder.typicode.com/posts');: We use await to pause the execution of the function until the 
fetch() Promise is resolved. The fetch() function is used to make the API request and returns a response.
4.if (!response.ok) { ... }: We check if the response is successful (ok property is true). If not, we throw an error using the throw keyword.
5.const data = await response.json();: We use await again to pause the execution until the json() Promise is resolved. The json() method parses 
the response body as JSON, returning a Promise that resolves with the parsed data.
6.return data;: We return the parsed JSON data (an array of posts) from the function.
7.catch (error) { ... }: If any errors occur during the try block, they will be caught in the catch block, and the error message will be logged to 
the console.

// Function to display the posts on the webpage
function displayPosts(posts) {
  const postList = document.getElementById('postList');
  posts.forEach(post => {
    const listItem = document.createElement('li');
    listItem.textContent = post.title;
    postList.appendChild(listItem);
  });
}

// Asynchronous function to fetch and display posts
async function fetchAndDisplayPosts() {
  const posts = await fetchPosts(); // Fetch posts (awaits the resolution of fetchPosts Promise)
  displayPosts(posts); // Display the fetched posts
}

fetchAndDisplayPosts(); // Call the async function to start the process

1.function displayPosts(posts) { ... }: This function takes the fetched posts as an argument and is responsible for displaying them on the webpage.
2.const postList = document.getElementById('postList');: We retrieve the HTML element with the ID "postList" where we will display the posts.
3.posts.forEach(post => { ... }): We use the forEach() method to loop through each post in the posts array.
4.const listItem = document.createElement('li');: For each post, we create a new list item (<li>) element.
5.listItem.textContent = post.title;: We set the text content of the list item to the title of the current post.
6.postList.appendChild(listItem);: We append the list item to the "postList" <ul> element, effectively displaying the post title on the webpage.
7.async function fetchAndDisplayPosts() { ... }: This is an asynchronous function that calls fetchPosts() to fetch the posts and then calls displayPosts() to display them on the webpage.
8.fetchAndDisplayPosts();: We call the fetchAndDisplayPosts() function to start the process of fetching and displaying the posts.
